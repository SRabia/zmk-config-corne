/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        plusequal: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp PLUS &kp EQUAL>;
            label = "NEW_MACRO";
        };

        minusequal: minusequal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp MINUS &kp EQUAL>;
            label = "MINUSEQUAL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &kp Q             &kp W  &kp E           &kp R      &kp T          &kp Y        &kp U    &kp I         &kp O    &kp P            &trans
&trans  &mt LEFT_SHIFT A  &kp S  &kp D           &kp F      &kp G          &kp H        &kp J    &kp K         &kp L    &mt RSHIFT SEMI  &trans
&trans  &mt LCTRL Z       &kp X  &kp C           &kp V      &kp B          &kp N        &kp M    &kp COMMA     &kp DOT  &mt RCTRL FSLH   &trans
                                 &lt 3 LEFT_GUI  &lt 2 ESC  &lt 1 ENTER    &lt 2 SPACE  &kp DEL  &kp LEFT_GUI
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5         &kp N6       &kp N7            &kp N8             &kp N9                &kp N0                 &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET    &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &trans       &trans    &trans      &trans         &minusequal  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &plusequal
                                      &trans    &trans      &trans         &trans       &trans            &trans
            >;
        };

        sym {
            bindings = <
&trans  &trans     &trans     &trans  &kp DOUBLE_QUOTES  &trans    &trans          &trans          &trans         &trans           &kp MINUS       &trans
&trans  &kp TAB    &kp GRAVE  &trans  &kp SQT            &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW  &kp UNDERSCORE  &trans
&trans  &kp EQUAL  &kp PLUS   &trans  &trans             &trans    &kp LC(PLUS)    &kp LC(EQUAL)   &kp RC(MINUS)  &kp BACKSLASH    &kp PIPE        &trans
                              &trans  &trans             &trans    &trans          &trans          &trans
            >;
        };

        control {
            bindings = <
&trans  &kp RG(RS(NUMBER_1))  &kp RS(RG(NUMBER_2))  &kp RS(RG(NUMBER_3))  &trans  &trans    &trans      &trans  &trans  &trans      &trans  &bt BT_CLR_ALL
&trans  &trans                &trans                &trans                &trans  &trans    &bt BT_PRV  &trans  &trans  &bt BT_NXT  &trans  &bt BT_CLR
&trans  &trans                &trans                &trans                &trans  &trans    &trans      &trans  &trans  &trans      &trans  &trans
                                                    &trans                &trans  &trans    &trans      &trans  &trans
            >;
        };
    };
};
